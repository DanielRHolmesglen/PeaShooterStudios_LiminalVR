using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using Liminal.SDK.VR;
using Liminal.SDK.VR.Input;
using System;
/// <summary>
/// Controls the left hand "rapid fire" gun
/// </summary>
public class PewPewGunController : MonoBehaviour
{
    public float directDamage = 10f;                // Damage per shot
    public float heatPerShot = 1f;           // Amount of heat generated per shot
    public float overheatThreshold = 50f;   // Overheat threshold
    public float ventHeatRate = 20f;     // Rate at which the gun cools down when overheated
    public float normalVentHeatRate = 0.5f; // Rate at which the gun cools down when not overheated
    public float maxRange; //how far the laser is rednered if nothing is hit 
    public float currentHeat = 0f;  // Current heat level

    private bool isOverheated = false;
    private AudioSource audioSource;

    public LineRenderer laserLine;
    public Transform gunBarrelEnd;

    public bool isCoolingDown = false;
    public float cooldown = 0.15f; //time between shots

    private void Start()
    {
        audioSource = GetComponent<AudioSource>();

    }

    private void Update()
    {
        if (isOverheated)             // If the gun is overheated, start cooling down
        {
            currentHeat -= ventHeatRate * Time.deltaTime;
        }
        else
        {
            currentHeat -= normalVentHeatRate * Time.deltaTime;
        }

        currentHeat = Mathf.Clamp(currentHeat, 0f, overheatThreshold);

        // Check if the gun is no longer overheated
        if (isOverheated && currentHeat < overheatThreshold)
        {
            isOverheated = false;
        }


        var secondaryInput = VRDevice.Device.PrimaryInputDevice; //CHANGE THIS WHEN TESTING IN UNITY
    
        if (secondaryInput.GetButton(VRButton.One) && (!isOverheated) && (!isCoolingDown) || Input.GetMouseButton(0) && (!isOverheated) && (!isCoolingDown)) //Checking every frame if button is being pressed, for "full auto"
        {
            PewPew();

            StartCoroutine(GunCooldown());

        }

    }

    private void PewPew()
    {

        // Add heat generated by the shot
        currentHeat += heatPerShot;

        // Fire sound
        audioSource.Play();
        
        //check if raycast hits, and if the gun is overheated
        if (Physics.Raycast(gunBarrelEnd.position, gunBarrelEnd.forward, out RaycastHit hit) && !isOverheated)
        {
            // Draw the laser line in the direction the gun was pointing.
            laserLine.enabled = true;
            laserLine.SetPosition(0, gunBarrelEnd.position);
            laserLine.SetPosition(1, hit.point);

            //get the directly hit enemy
            EnemyHealth directEnemyHealth = hit.collider.GetComponentInParent<EnemyHealth>();

            //Do damage to the the directly hit enemy (if there is one)
            if (directEnemyHealth != null)
            {
                directEnemyHealth.Damage(directDamage, DamageType.Gun);
            }


        }
        else
        {
            // Draw the laser line in the direction the gun was pointing.
            laserLine.enabled = true;
            laserLine.SetPosition(0, gunBarrelEnd.position);
            laserLine.SetPosition(1, gunBarrelEnd.position + gunBarrelEnd.forward * maxRange);
            
        }

        //Overheat gun (AKA isOverheated = true) if this shot pushed over threshold
        if (currentHeat + heatPerShot >= overheatThreshold)
        {
            isOverheated = true;
            StartCoroutine(VentHeat());
        }

        //Turn everything off
        Invoke("TurnOffLaser", 0.3f);
    }

    private IEnumerator VentHeat()
    {
        while (currentHeat > 0)
        {
            yield return new WaitForSeconds(1.0f);
            currentHeat -= ventHeatRate;
        }

    }

    private IEnumerator GunCooldown()
    {
        isCoolingDown = true;
        yield return new WaitForSeconds(cooldown);
        isCoolingDown = false;
    }

    private void TurnOffLaser()
    {
        laserLine.enabled = false;
    }
}
